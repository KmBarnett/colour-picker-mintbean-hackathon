{"version":3,"sources":["Colors/Colors.jsx","Palette/Palette.jsx","Navbar/Navbar.jsx","App/App.js","serviceWorker.js","index.js"],"names":["Colors","hex","complement","useState","copied","setCopied","onCopy","setTimeout","text","style","backgroundColor","color","className","tinycolor","require","Palette","colors","variation","brightness","saturation","setRandom","tetrad","analogous","monochromatic","splitcomplement","triad","toHexString","colorPalette","Array","isArray","map","t","hexColor","brighten","saturate","toString","method","isDark","key","uniqid","id","Button","onClick","variant","size","block","Settings","changeVariation","changeBrightness","changeSaturation","changeSettings","e","target","name","Navbar","expand","bg","Nav","Toggle","aria-controls","Collapse","Brand","NavDropdown","onSelect","title","Item","eventKey","Divider","Link","value","App","changeHex","randomColor","random","handleSpace","isLink","classList","contains","keyCode","useEffect","document","querySelector","addEventListener","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdd98cb6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport default function Colors({ hex, complement }) {\n  const [copied, setCopied] = useState(false)\n\n  const handleCopy = () => {\n    setCopied(true)\n    setTimeout(setCopied, 1000, false);\n  }\n\n  return (\n    <CopyToClipboard onCopy={handleCopy} text={hex}>\n      <div\n        style={{ backgroundColor: hex, color: complement }}\n        className=\"color\"\n      >\n        <div style={{ color: complement }} className=\"hex-value\">\n          <p className={`copied-${copied} copied`}>Copied</p>\n          <button style={{ color: complement }} className=\"hex-copy\">\n            {hex}\n          </button>\n        </div>\n      </div>\n    </CopyToClipboard>\n  );\n}\n","import React from \"react\";\nimport Colors from \"./../Colors/Colors\";\nimport \"./Palette.css\";\nimport uniqid from \"uniqid\";\nimport { Button } from \"react-bootstrap\";\n\nconst tinycolor = require(\"tinycolor2\");\n\nexport default function Palette({\n  hex,\n  variation,\n  brightness,\n  saturation,\n  setRandom\n}) {\n  let colors;\n\n  // Using a switch to set variation type set\n  switch (variation) {\n    case \"tetrad\":\n      colors = tinycolor(hex).tetrad(5, 5);\n      break;\n    case \"analogous\":\n      colors = tinycolor(hex).analogous(5, 5);\n      break;\n    case \"monochromatic\":\n      colors = tinycolor(hex).monochromatic(5, 5);\n      break;\n    case \"splitcomplement\":\n      colors = tinycolor(hex).splitcomplement();\n      break;\n    case \"triad\":\n      colors = tinycolor(hex).triad();\n      break;\n    case \"complement\":\n      colors = tinycolor(hex).complement().toHexString();\n      break;\n    default:\n      return;\n  }\n\n  // Using a dictionary object to set setting\n  const settings = (color) => {\n    return tinycolor(color)\n      .brighten(brightness)\n      .saturate(saturation)\n      .toString();\n  };\n\n  let colorPalette;\n  if (!Array.isArray(colors)) {\n    return <Colors hex={colors} />;\n  } else {\n    colorPalette = colors.map((t) => {\n      let hexColor = t.toHexString();\n\n      hexColor = settings(hexColor);\n\n      let method = tinycolor(hexColor).isDark() ? \"brighten\" : \"darken\";\n\n      return (\n        <Colors\n          key={uniqid()}\n          hex={hexColor}\n          complement={tinycolor(hexColor)[method](100).toString()}\n        />\n      );\n    });\n  }\n\n  return (\n    <section id=\"container\">\n      {colorPalette}\n      <Button\n        className=\"random-btn\"\n        onClick={setRandom}\n        variant=\"primary\"\n        size=\"lg\"\n        block\n      >\n        Random\n      </Button>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport './Navbar.css'\n\nexport default function Settings({\n  changeVariation,\n  changeBrightness,\n  changeSaturation,\n  brightness,\n  saturation\n}) {\n  \n  const handleVariationChange = (variation) => {\n    changeVariation(variation);\n  };\n\n  const changeSettings = (e) => {\n    const settingAmount = e.target.name;\n    \n\n    switch (settingAmount) {\n      case \"brighten\":\n        changeBrightness(brightness + 10);\n        break;\n      case \"darken\":\n        changeBrightness(brightness - 10);\n        break;\n      case \"desaturate\":\n        changeSaturation(saturation - 10);\n        break;\n      case \"saturate\":\n        changeSaturation(saturation + 10);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div>\n      <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Nav className=\"mr-auto\">\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Navbar.Brand>Color Palette Generator</Navbar.Brand>\n            <NavDropdown\n              onSelect={(e) => handleVariationChange(e)}\n              title=\"Variation\"\n              id=\"variation\"\n            >\n              <NavDropdown.Item eventKey=\"analogous\">\n                Analogous\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"monochromatic\">\n                Monochromatic\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n\n              <NavDropdown.Item eventKey=\"complement\">\n                Complement\n              </NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"splitcomplement\">\n                Split Complement\n              </NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item eventKey=\"triad\">Triad</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"tetrad\">Tetrad</NavDropdown.Item>\n              <NavDropdown.Divider />\n            </NavDropdown>\n            <Nav.Link\n              value={\"brighten\"}\n              name={\"brighten\"}\n              onClick={(e) => changeSettings(e)}\n            >\n              Brighten\n            </Nav.Link>\n            <Nav.Link\n              value={\"brighten\"}\n              name={\"darken\"}\n              onClick={(e) => changeSettings(e)}\n            >\n              Darken\n            </Nav.Link>\n            <Nav.Link\n              value={\"saturate\"}\n              name={\"desaturate\"}\n              onClick={(e) => changeSettings(e)}\n            >\n              Desaturate\n            </Nav.Link>\n            <Nav.Link\n              value={\"saturate\"}\n              name={\"saturate\"}\n              onClick={(e) => changeSettings(e)}\n            >\n              Saturate\n            </Nav.Link>\n          </Navbar.Collapse>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Palette from \"../Palette/Palette\";\nimport Settings from \"../Navbar/Navbar.jsx\";\nimport tinycolor from \"tinycolor2\";\n\nfunction App() {\n  const [hex, changeHex] = useState(\"#5f42ad\");\n  const [variation, changeVariation] = useState(\"analogous\");\n  const [brightness, changeBrightness] = useState(0);\n  const [saturation, changeSaturation] = useState(0);\n\n  const setRandom = () => {\n    const randomColor = tinycolor.random().toHexString();\n    changeBrightness(0);\n    changeSaturation(0);\n    changeHex(randomColor);\n  };\n\n  const handleSpace = (e) => {\n    const isLink = e.target.classList.contains(\"nav-link\");\n    const isSpace = e.keyCode === 32;\n\n    if (isSpace && !isLink) {\n      setRandom();\n    }\n  };\n\n  useEffect(() => {\n    document.querySelector(\"body\").addEventListener(\"keyup\", handleSpace);\n    // eslint-disable-next-line\n  }, []);\n \n\n  return (\n    <main className=\"App\">\n      <Settings\n        changeVariation={changeVariation}\n        changeHex={changeHex}\n        changeBrightness={changeBrightness}\n        changeSaturation={changeSaturation}\n        setRandom={setRandom}\n        brightness={brightness}\n        saturation={saturation}\n      />\n      <Palette\n        brightness={brightness}\n        saturation={saturation}\n        variation={variation}\n        setRandom={setRandom}\n        hex={hex}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}